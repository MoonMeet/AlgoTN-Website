import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "@/styles/globals.css";
import { AppRouterCacheProvider } from '@mui/material-nextjs/v15-appRouter';
import { NextIntlProvider } from "@/contexts/NextntlProvider";
import { redirect } from 'next/navigation';
import { ThemeProvider as MaterialProvider } from '@mui/material/styles';
import theme from "@/themes/material";
import { ThemeProvider } from "@/contexts/ThemeProvider"
import { ThemeToggle } from "@/components/ui/theme-toggle"

const geistSans = Geist({
    variable: "--font-geist-sans",
    subsets: ["latin"],
});

const geistMono = Geist_Mono({
    variable: "--font-geist-mono",
    subsets: ["latin"],
});

export const metadata: Metadata = {
    title: "Create Next App",
    description: "Generated by create next app",
};

export default async function RootLayout({
    children,
    params,
}: {
    children: React.ReactNode;
    params: { locale: "en" | "fr" };
}) {

    const resolvedParams = await Promise.resolve(params);
    const { locale } = resolvedParams
    if (!['en', 'fr'].includes(locale)) {
        redirect('/en');
    }

    let messages;
    try {
        messages = (await import(`@/locales/${locale}.json`)).default;
    } catch (error) {
        console.error(`Failed to load messages for locale ${locale}`, error);
        redirect('/en');
    }

    return (
        <html lang={locale}>
            <body className={`${geistSans.variable} ${geistMono.variable} antialiased dark:bg-gray-900 dark:text-white`}>
                <AppRouterCacheProvider>
                <ThemeProvider>
                    <ThemeToggle />
                    <NextIntlProvider locale={locale} messages={messages}>
                        <MaterialProvider theme={theme}>
                            {children}
                        </MaterialProvider>
                    </NextIntlProvider>
                </ThemeProvider>
                </AppRouterCacheProvider>
            </body>
        </html >
    );
}